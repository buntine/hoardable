module Hoardable
  VERSION: String
  DATA_KEYS: [:meta, :whodunit, :note, :event_uuid]
  CONFIG_KEYS: [:enabled, :version_updates, :save_trash]
  VERSION_CLASS_SUFFIX: String
  VERSION_TABLE_SUFFIX: String
  DURING_QUERY: String
  HOARDABLE_CALLBACKS_ENABLED: ^(untyped) -> untyped
  HOARDABLE_SAVE_TRASH: ^(untyped) -> untyped
  HOARDABLE_VERSION_UPDATES: ^(untyped) -> untyped
  self.@context: Hash[untyped, untyped]
  self.@config: untyped
  self.@at: nil
  self.@logger: untyped

  def self.with: (untyped hash) -> untyped
  def self.at: (untyped datetime) -> untyped
  def self.logger: -> untyped

  module FinderMethods
    def find_one: (untyped id) -> untyped
    def find_some: (untyped ids) -> untyped

    private
    def hoardable_source_ids: ([untyped] ids) -> Array[untyped]
  end

  module Scopes
    TABLEOID_AREL_CONDITIONS: Proc
    self.@klass: bot

    private
    def tableoid: -> untyped

    public
    attr_writer tableoid: untyped
  end

  class Error < StandardError
  end

  class CreatedAtColumnMissingError < Error
    def initialize: (untyped source_table_name) -> void
  end

  class DatabaseClient
    @hoardable_version_source_id: untyped

    attr_reader source_record: SourceModel
    def initialize: (SourceModel source_record) -> void
    def insert_hoardable_version: (untyped operation) -> untyped
    def find_or_initialize_hoardable_event_uuid: -> untyped
    def hoardable_version_source_id: -> untyped
    def query_hoardable_version_source_id: -> untyped
    def initialize_version_attributes: (untyped operation) -> untyped
    def initialize_temporal_range: -> Range
    def initialize_hoardable_data: -> untyped
    def assign_hoardable_context: (:event_uuid | :meta | :note | :whodunit key) -> nil
    def unset_hoardable_version_and_event_uuid: -> nil
    def previous_temporal_tsrange_end: -> untyped
    def hoardable_source_epoch: -> untyped
  end

  module SourceModel
    include Scopes
    @hoardable_client: DatabaseClient

    attr_reader hoardable_version: untyped
    def trashed?: -> untyped
    def version?: -> untyped
    def at: (untyped datetime) -> SourceModel?
    def version_at: (untyped datetime) -> untyped
    def revert_to!: (untyped datetime) -> SourceModel?
    def hoardable_source_id: -> untyped

    private
    def hoardable_client: -> DatabaseClient

    public
    def version_class: -> untyped
    def hoardable: -> untyped
  end

  module VersionModel
    @hoardable_source_attributes: untyped

    def revert!: -> untyped
    def untrash!: -> untyped
    def changes: -> untyped
    def hoardable_source_id: -> untyped

    private
    def insert_untrashed_source: -> untyped
    def hoardable_source_attributes: -> untyped

    public
    def scope_attributes: -> untyped
  end

  module Model
    include VersionModel
    include SourceModel
    include Associations

    attr_reader _hoardable_config: Hash[untyped, untyped]
    def hoardable_config: (?nil hash) -> untyped
    def with_hoardable_config: (untyped hash) -> untyped
  end

  module Associations
    @hoardable_association_overrider: Overrider

    def belongs_to: (*untyped args) -> nil
    def has_one: (*untyped args) -> nil
    def has_many: (*untyped args) -> untyped

    private
    def hoardable_association_overrider: -> Overrider

    module HasManyExtension
      @scope: untyped
      @association: bot

      def scope: -> untyped

      private
      def hoardable_scope: -> untyped
    end

    class Overrider
      attr_reader klass: Associations
      def initialize: (Associations klass) -> void
      def override_belongs_to: (untyped name) -> untyped
      def override_has_one: (untyped name) -> untyped
      def override_has_many: (untyped name) -> untyped
    end
  end

  class MigrationGenerator
    @singularized_table_name: untyped

    def create_versions_table: -> untyped
    def foreign_key_type: -> String
    def migration_template_name: -> String
    def singularized_table_name: -> untyped
  end

  class InstallGenerator
    def create_initializer_file: -> untyped
    def create_migration_file: -> untyped
    def self.next_migration_number: (untyped dir) -> untyped
  end
end
