# frozen_string_literal: true

class InstallHoardable < ActiveRecord::Migration[<%= ActiveRecord::Migration.current_version %>]
  def up
    execute(
      <<~SQL
        DO $$
        BEGIN
          IF NOT EXISTS (
            SELECT 1 FROM pg_type t WHERE t.typname = 'hoardable_operation'
          ) THEN
            CREATE TYPE hoardable_operation AS ENUM ('update', 'delete', 'insert');
          END IF;
        END
        $$;
        CREATE OR REPLACE FUNCTION hoardable_source_set_id() RETURNS trigger
          LANGUAGE plpgsql AS
        $$
        DECLARE
          _pk information_schema.constraint_column_usage.column_name%TYPE;
          _id _pk%TYPE;
        BEGIN
          SELECT c.column_name
            FROM information_schema.table_constraints t
            JOIN information_schema.constraint_column_usage c
            ON c.constraint_name = t.constraint_name
            WHERE c.table_name = TG_TABLE_NAME AND t.constraint_type = 'PRIMARY KEY'
            LIMIT 1
            INTO _pk;
          EXECUTE format('SELECT $1.%I', _pk) INTO _id USING NEW;
          NEW.hoardable_id = _id;
          RETURN NEW;
        END;$$;
        CREATE OR REPLACE FUNCTION hoardable_version_prevent_update() RETURNS trigger
          LANGUAGE plpgsql AS
        $$BEGIN
          RAISE EXCEPTION 'updating a version is not allowed';
          RETURN NEW;
        END;$$;
      SQL
    )
  end
  def down
    execute(
      <<~SQL
        DROP TYPE IF EXISTS hoardable_operation;
        DROP FUNCTION IF EXISTS hoardable_version_prevent_update();
        DROP FUNCTION IF EXISTS hoardable_source_set_id();
      SQL
    )
  end
end
